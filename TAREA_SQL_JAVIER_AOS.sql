-- CONTRUCCIÓN DEL ESQUEMA

CREATE SCHEMA IF NOT EXISTS TAREASQL;
USE TAREASQL;

CREATE TABLE IF NOT EXISTS PROVEEDOR (
  IDPROVEEDOR INT NOT NULL AUTO_INCREMENT,
  NOMBRE VARCHAR(45),
  DIRCONTACTO VARCHAR(45),
  PRIMARY KEY (IDPROVEEDOR)
  );

CREATE TABLE IF NOT EXISTS ARTICULO (
  IDARTICULO INT NOT NULL AUTO_INCREMENT,
  NOMBRE VARCHAR(45),
  IDPROVEEDOR INT NOT NULL,
  PRECIO DECIMAL(10),
  PRIMARY KEY (IDARTICULO, PRECIO),
  FOREIGN KEY (IDPROVEEDOR) REFERENCES PROVEEDOR (IDPROVEEDOR)
  );
  
CREATE TABLE IF NOT EXISTS CATEGORIA (
  IDCATEGORIA INT NOT NULL AUTO_INCREMENT,
  DESCRIPCIONCAT VARCHAR(45),
  LIMITE DECIMAL(20,0),
  DESCUENTO DECIMAL(10,0),
  PRIMARY KEY (IDCATEGORIA, DESCRIPCIONCAT, LIMITE, DESCUENTO)
  );

CREATE TABLE IF NOT EXISTS TIENDA (
  IDTIENDA INT NOT NULL AUTO_INCREMENT,
  NOMBRE VARCHAR(45),
  LIMITE DECIMAL(20,0),
  DESCUENTO DECIMAL(10,0),
  IDCATEGORIA INT NOT NULL,
  DESCRIPCIONCAT VARCHAR(45),
  PRIMARY KEY (IDTIENDA),
  FOREIGN KEY (IDCATEGORIA, DESCRIPCIONCAT, LIMITE, DESCUENTO) REFERENCES CATEGORIA (IDCATEGORIA, DESCRIPCIONCAT, LIMITE, DESCUENTO),
  CONSTRAINT C_LIMIT CHECK (LIMITE <= 30000)
  );

CREATE TABLE IF NOT EXISTS DIRECCION (
  IDDIRECCION INT NOT NULL AUTO_INCREMENT,
  CALLE VARCHAR(45) NULL DEFAULT NULL,
  NUM VARCHAR(45) NULL DEFAULT NULL,
  POB VARCHAR(45) NULL DEFAULT NULL,
  CIUDAD VARCHAR(45) NULL DEFAULT NULL,
  TLFN VARCHAR(45) NULL DEFAULT NULL,
  EMAIL VARCHAR(45) NULL DEFAULT NULL,
  IDTIENDA INT NOT NULL,
  PRIMARY KEY (IDDIRECCION),
  FOREIGN KEY (IDTIENDA) REFERENCES TIENDA(IDTIENDA)
  );

CREATE TABLE IF NOT EXISTS PEDIDO (
  IDPEDIDO INT NOT NULL AUTO_INCREMENT,
  FECHA DATETIME NULL DEFAULT NULL,
  IDTIENDA INT NOT NULL,
  TOTALPEDIDO DECIMAL(10),
  PRIMARY KEY (IDPEDIDO),
  FOREIGN KEY (IDTIENDA) REFERENCES TIENDA(IDTIENDA)
  );

CREATE TABLE IF NOT EXISTS LINEAPEDIDO (
  IDLINEA INT NOT NULL AUTO_INCREMENT,
  DESCRIPCION VARCHAR(45) NULL DEFAULT NULL,
  UNIDADES INT NULL DEFAULT NULL,
  PRECIO DECIMAL(10,0),
  TOTAL DECIMAL(10,0) AS (PRECIO * UNIDADES),
  IDPEDIDO INT NOT NULL,
  IDARTICULO INT NOT NULL,
  PRIMARY KEY (IDLINEA),
  FOREIGN KEY (IDPEDIDO) REFERENCES PEDIDO(IDPEDIDO),
  FOREIGN KEY (IDARTICULO, PRECIO) REFERENCES ARTICULO(IDARTICULO, PRECIO)
);

CREATE TABLE IF NOT EXISTS ENTREGA (
  IDDIRECCION INT NOT NULL,
  IDLINEA INT NOT NULL,
  FECHAENTREGA DATETIME,
  PRIMARY KEY (IDDIRECCION, IDLINEA),
  FOREIGN KEY (IDDIRECCION) REFERENCES DIRECCION(IDDIRECCION),
  FOREIGN KEY (IDLINEA) REFERENCES LINEAPEDIDO(IDLINEA)
);

-- Insertando valores en todas las tablas

INSERT INTO CATEGORIA VALUES (1, 'VOLUMEN BAJO', 10000, 10);
INSERT INTO CATEGORIA VALUES (2, 'VOLUMEN MEDIO', 20000, 15);
INSERT INTO CATEGORIA VALUES (3, 'VOLUMEN ALTO', 30000, 20);

INSERT INTO PROVEEDOR VALUES (1, 'PROVEEDOR 1', 'CONTACTO@PROVEEDOR1.COM');
INSERT INTO PROVEEDOR VALUES (2, 'PROVEEDOR 2', 'CONTACTO@PROVEEDOR2.COM');
INSERT INTO PROVEEDOR VALUES (3, 'PROVEEDOR 3', 'CONTACTO@PROVEEDOR3.COM');
INSERT INTO PROVEEDOR VALUES (4, 'PROVEEDOR 4', 'CONTACTO@PROVEEDOR4.COM');

INSERT INTO TIENDA VALUES (1,'TIENDA 1', 10000, 10, 1, 'VOLUMEN BAJO');
INSERT INTO TIENDA VALUES (2,'TIENDA 2', 10000, 10, 1, 'VOLUMEN BAJO');
INSERT INTO TIENDA VALUES (3,'TIENDA 3', 20000, 15, 2, 'VOLUMEN MEDIO');
INSERT INTO TIENDA VALUES (4,'TIENDA 4', 30000, 20, 3, 'VOLUMEN ALTO');

INSERT INTO DIRECCION VALUES (1, 'FELIPE VI', 28, 'MADRID', 'MADRID', 630939798, 'EJEMPLO1@GMAIL.COM', 1);
INSERT INTO DIRECCION VALUES (2, 'FELIPE V', 29, 'MADRID', 'MADRID', 630936098, 'EJEMPLO2@GMAIL.COM', 1);
INSERT INTO DIRECCION VALUES (3, 'FELIPE VI', 30, 'MADRID', 'MADRID', 630935098, 'EJEMPLO3@GMAIL.COM', 2);
INSERT INTO DIRECCION VALUES (4, 'FELIPE IV', 31, 'MADRID', 'MADRID', 634939098, 'EJEMPLO4@GMAIL.COM', 3);
INSERT INTO DIRECCION VALUES (5, 'SAN AGUSTIN', 32, 'MADRID', 'MADRID', 620939098, 'EJEMPLO5@GMAIL.COM', 4);

INSERT INTO PEDIDO VALUES (1, '2022-04-01 10:34:00', 1, 10);
INSERT INTO PEDIDO VALUES (2, '2021-04-01 11:34:00', 2, 20);
INSERT INTO PEDIDO VALUES (3, '2020-04-01 12:34:43', 3, 30);
INSERT INTO PEDIDO VALUES (4, '2019-04-01 13:34:00', 4, 40);

INSERT INTO ARTICULO VALUES (1, 'DESTORNILLADOR', 1, 5);
INSERT INTO ARTICULO VALUES (2, 'LLAVE INGLESA', 2, 10);
INSERT INTO ARTICULO VALUES (3, 'TORNILLO', 3, 5);
INSERT INTO ARTICULO VALUES (4, 'MARTILLO', 4, 20);

INSERT INTO LINEAPEDIDO (IDLINEA, DESCRIPCION, UNIDADES, PRECIO, IDPEDIDO, IDARTICULO) VALUES (1, 'DESTORNILLADOR', 2, 5, 1, 1);
INSERT INTO LINEAPEDIDO (IDLINEA, DESCRIPCION, UNIDADES, PRECIO, IDPEDIDO, IDARTICULO) VALUES (2, 'MARTILLO', 1, 20, 2, 4);
INSERT INTO LINEAPEDIDO (IDLINEA, DESCRIPCION, UNIDADES, PRECIO, IDPEDIDO, IDARTICULO) VALUES (3, 'LLAVE INGLESA', 1, 10, 3, 2);
INSERT INTO LINEAPEDIDO (IDLINEA, DESCRIPCION, UNIDADES, PRECIO, IDPEDIDO, IDARTICULO) VALUES (4, 'MARTILLO', 1, 20, 3, 4);
INSERT INTO LINEAPEDIDO (IDLINEA, DESCRIPCION, UNIDADES, PRECIO, IDPEDIDO, IDARTICULO) VALUES (5, 'MARTILLO', 2, 20, 4, 4);
INSERT INTO LINEAPEDIDO (IDLINEA, DESCRIPCION, UNIDADES, PRECIO, IDPEDIDO, IDARTICULO) VALUES (6, 'MARTILLO', 2, 20, 4, 4);
INSERT INTO LINEAPEDIDO (IDLINEA, DESCRIPCION, UNIDADES, PRECIO, IDPEDIDO, IDARTICULO) VALUES (7, 'LLAVE INGLESA', 1, 10, 4, 2);

INSERT INTO ENTREGA VALUES (1, 1, '2022-04-05 12:38:39');
INSERT INTO ENTREGA VALUES (2, 2, '2022-03-05 11:38:39');
INSERT INTO ENTREGA VALUES (3, 3, '2021-02-05 13:38:39');
INSERT INTO ENTREGA VALUES (4, 4, '2021-04-05 12:38:39');
INSERT INTO ENTREGA VALUES (5, 5, '2021-04-05 12:38:39');
INSERT INTO ENTREGA VALUES (2, 6, '2021-04-05 12:38:39');
INSERT INTO ENTREGA VALUES (1, 7, '2022-04-05 12:38:39');

-- PREGUNTA 2: Utilizar la instrucción SQL de inserción de datos para insertar una fila en la tabla de pedidos

INSERT INTO PEDIDO VALUES (5, '2022-04-05 20:34:00', 1, 50);

SELECT * FROM PEDIDO;

-- PREGUNTA 3: Visualizar mediante una instrucción SQL todas las tiendas que componen la red de distribución de la
-- fábrica, se deberán detallar: nombre de la tienda, dirección, descripción de la categoría, descuento y
-- límite de crédito asociado a la tienda.

SELECT NOMBRE, CALLE, NUM, POB, CIUDAD, DESCRIPCIONCAT, DESCUENTO, LIMITE
FROM TIENDA T JOIN DIRECCION D ON T.IDTIENDA = D.IDTIENDA;

-- PREGUNTA 4: Visualizar mediante una instrucción SQL los pedidos suministrados a cada una de las tiendas en un
-- período determinado (último año). Se deberán obtener los siguientes datos: número de pedido, fecha
-- de suministro, dirección de entrega, y el importe total del pedido.

SELECT L.IDPEDIDO, FECHAENTREGA, D.CALLE, D.NUM, TOTAL, P.TOTALPEDIDO FROM ENTREGA E
JOIN LINEAPEDIDO L ON E.IDLINEA = L.IDLINEA
JOIN DIRECCION D ON E.IDDIRECCION = D.IDDIRECCION
JOIN PEDIDO P ON L.IDPEDIDO = P.IDPEDIDO
WHERE FECHAENTREGA >= '2021-01-01 00:00:00' AND FECHAENTREGA <= '2021-12-31 00:00:00';

-- PREGUNTA 5: Identificar mediante una consulta SQL los repartos realizados por cada uno de los proveedores
-- destinados a ello. Se deberá identificar al menos: Nombre del proveedor de reparto, su dirección y la
-- relación de los artículos suministrados en cada reparto.

SELECT P.NOMBRE, L.IDLINEA, A.IDPROVEEDOR, P.DIRCONTACTO, D.CALLE, D.NUM,
L.IDARTICULO, L.DESCRIPCION, L.UNIDADES, L.PRECIO, L.TOTAL FROM ENTREGA E 
JOIN DIRECCION D ON E.IDDIRECCION = D.IDDIRECCION
JOIN LINEAPEDIDO L ON E.IDLINEA = L.IDLINEA
JOIN ARTICULO A ON L.IDARTICULO = A.IDARTICULO
JOIN PROVEEDOR P ON A.IDPROVEEDOR = P.IDPROVEEDOR;

-- PREGUNTA 6: Totalizar los repartos anuales realizados por cada proveedor de reparto.

SELECT P.NOMBRE, COUNT(E.IDLINEA) AS NUMERO_DE_REPARTOS FROM ENTREGA E 
JOIN LINEAPEDIDO L ON L.IDLINEA = E.IDLINEA
JOIN ARTICULO A ON A.IDARTICULO = L.IDARTICULO
JOIN PROVEEDOR P ON A.IDPROVEEDOR = P.IDPROVEEDOR
GROUP BY P.NOMBRE;

SELECT P.NOMBRE, COUNT(E.IDLINEA) AS NUMERO_DE_REPARTOS_2021 FROM ENTREGA E 
JOIN LINEAPEDIDO L ON L.IDLINEA = E.IDLINEA
JOIN ARTICULO A ON A.IDARTICULO = L.IDARTICULO
JOIN PROVEEDOR P ON A.IDPROVEEDOR = P.IDPROVEEDOR
WHERE FECHAENTREGA < 20220000
GROUP BY P.NOMBRE;

SELECT P.NOMBRE, SUM(L.TOTAL) AS IMPORTE_TOTAL_REPARTIDO FROM ENTREGA E 
JOIN LINEAPEDIDO L ON L.IDLINEA = E.IDLINEA
JOIN ARTICULO A ON A.IDARTICULO = L.IDARTICULO
JOIN PROVEEDOR P ON A.IDPROVEEDOR = P.IDPROVEEDOR
GROUP BY P.NOMBRE;

-- PREGUNTA 7: Identificar los cambios a realizar en el modelo relacional y en BBDD para clasificar a los proveedores
-- de reparto en categorías, de la misma forma que clasificamos las tiendas por categorías.

CREATE TABLE IF NOT EXISTS CAT_PROVEEDOR (
  IDCAT_PROV INT NOT NULL AUTO_INCREMENT,
  DESCRIPCION VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (IDCAT_PROV)
);

ALTER TABLE PROVEEDOR ADD IDCAT_PROV INT;
ALTER TABLE PROVEEDOR ADD CONSTRAINT FK_PROVEEDOR
FOREIGN KEY (IDCAT_PROV) REFERENCES CAT_PROVEEDOR(IDCAT_PROV);

-- PREGUNTA 8: Necesitamos introducir nuevos atributos en la tabla de artículos, la fábrica ha descubierto que puede
-- comprar un artículo de parecidas características al nuestro y distribuirlo como marca blanca.

ALTER TABLE ARTICULO ADD MARCABLANCA VARCHAR(20);

-- PREGUNTA 9: Queremos ampliar la información del proveedor de suministro, para ello necesitaríamos incorporar los
-- datos relativos a las zonas de cobertura de este (Países y Regiones). Determinar los cambios a
-- realizar a nivel físico y lógico.

CREATE TABLE IF NOT EXISTS PAIS (
  IDPAIS INT NOT NULL AUTO_INCREMENT,
  NOMBREPAIS VARCHAR(45),
  REGION VARCHAR(45),
  PRIMARY KEY (IDPAIS, REGION)
  );
  
CREATE TABLE IF NOT EXISTS CUBRE (
  IDPAIS INT NOT NULL,
  REGION INT NOT NULL,
  IDPROVEEDOR INT NOT NULL,
  PRIMARY KEY (IDPAIS, IDPROVEEDOR),
  FOREIGN KEY (IDPAIS) REFERENCES PAIS(IDPAIS),
  FOREIGN KEY (IDPROVEEDOR) REFERENCES PROVEEDOR(IDPROVEEDOR)
  );
  
-- ¿Qué podríamos hacer para realizar un backup de la tabla de pedidos / líneas de pedido? Esto es,
-- necesitamos hacer todos los días un proceso de backup a otra Base de Datos en las que se consolida
-- toda la venta del grupo (pedidos, líneas de pedido).

-- Server > Data export > selccionar la base de datos y las tablas > exportar

mysqldump -u ususario -p contraseña pedido > Escritorio/ejemplo1.sql;
mysqldump -u ususario -p contraseña lineapedido > Escritorio/ejemplo2.sql

-- Guardar en un archivo .bat y crear un job en windows que se ejecute todos los dias a las 00:00.



